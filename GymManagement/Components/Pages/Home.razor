@page "/"
@using MySql.Data.MySqlClient
@using MySql.Data
@using GymManagement.Classes
@inject AppState logIn

<!--Screen for the user to log in with a account-->
@if (logIn.loggedIn is false)
{
    <div class="content-container" style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; overflow: hidden;">
        <h1 style="font-size: 48px; color: #ff0000; text-shadow: 0 0 20px #ff4d4d;">Welcome to GymGo Terminal</h1>
        <div style="margin-top: 20px; display: flex; flex-direction: column; align-items: center;">
            <input type="text" placeholder="Username" style="margin-bottom: 10px; padding: 10px; width: 300px; border: 1px solid #ff0000; border-radius: 5px; background: #121212; color: #fff; font-size: 16px;" @bind="logIn.username" />
            <input type="password" placeholder="Password" style="margin-bottom: 20px; padding: 10px; width: 300px; border: 1px solid #ff0000; border-radius: 5px; background: #121212; color: #fff; font-size: 16px;" @bind="logIn.password" />
            <button style="background: linear-gradient(135deg, #ff0000, #ff4d4d); color: #fff; border: none; padding: 10px 20px; border-radius: 5px; font-size: 16px; cursor: pointer; transition: all 0.3s ease-in-out; box-shadow: 0 0 10px #ff0000;" @onclick="OnLoginClicked">Login</button>
            @if (!string.IsNullOrEmpty(failureMessage))
            {
                <p style="color: #ff0000; margin-top: 10px;">@failureMessage</p>
            }
        </div>
    </div>
}

else
{
    <button style="background: linear-gradient(135deg, #ff0000, #ff4d4d); color: #fff; border: none; padding: 10px 20px; border-radius: 5px; font-size: 16px; cursor: pointer; transition: all 0.3s ease-in-out; box-shadow: 0 0 10px #ff0000;" @onclick="() => viewMembers=true">View members</button>
    <button style="background: linear-gradient(135deg, #ff0000, #ff4d4d); color: #fff; border: none; padding: 10px 20px; border-radius: 5px; font-size: 16px; cursor: pointer; transition: all 0.3s ease-in-out; box-shadow: 0 0 10px #ff0000;" @onclick="() => viewMembers=false">View equipment</button>
    <!--Screen to show all to member's stored in the database and their information-->
    @if (viewMembers)
    {
        <table class="table table-dark">
            <thead>
                <tr>
                    <th scope="col">membership id</th>
                    <th scope="col">member name</th>
                    <th scope="col">start date</th>
                    <th scope="col">end date</th>
                    <th scope="col">membership fee</th>
                </tr>
            </thead>
            <tbody>
					@foreach (var member in members)
					{
					<tr>
						<td>@member.MembershipID</td>
						<td>@member.MemberName</td>
						<td>@member.StartDate.ToString("yyyy-MM-dd")</td>
						<td>@member.EndDate.ToString("yyyy-MM-dd")</td>
						<td>@member.MembershipFee</td>
					</tr>
					}
            </tbody>
        </table>
    }
    <!--Screen to show all current equipment and their details-->
    else
    {
        <table class="table table-dark">
            <thead>
                <tr>
                    <th scope="col">Equipment id</th>
                    <th scope="col">Equipment name</th>
                    <th scope="col">Equipment type</th>
                    <th scope="col">Is available</th>
                    <th scope="col">Last maintenance</th>
                </tr>
            </thead>
            <tbody>
				@foreach (var equipmentItem in equipment)
				{
					<tr>
						<td>@equipmentItem.equipmentID</td>
						<td>@equipmentItem.Name</td>
						<td>@equipmentItem.Type</td>
						<td>@(equipmentItem.isAvailable ? "Yes" : "No")</td>
						<td>@equipmentItem.lastMaintenanceDate.ToString("yyyy-MM-dd")</td>
					</tr>
				}
            </tbody>
        </table>
    }
}
@code {
    private string failureMessage;
    private bool viewMembers = true;
    private List<Member> members = new List<Member>();
    private List<Equipment> equipment = new List<Equipment>();
    private MySqlConnectionStringBuilder builder = new MySqlConnectionStringBuilder
        {
            Server = "sql3.freesqldatabase.com",
            UserID = "sql3774599",
            Password = "4SbFn7kpp9",
            Database = "sql3774599",
        };
	// Method checks for if the username and password exist in the login table and that they are stored in the same row to access the rest of the application
    private void OnLoginClicked()
    {
        MySqlConnection connection = new MySqlConnection(builder.ConnectionString);
        connection.Open();
        string sql = "SELECT * FROM login WHERE username = @username AND password = @password";
        MySqlCommand cmd = new MySqlCommand(sql, connection);
        cmd.Parameters.AddWithValue("@username", logIn.username);
        cmd.Parameters.AddWithValue("@password", logIn.password);
        MySqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            logIn.loggedIn = true;
            failureMessage = string.Empty;
        }
        else
        {
            failureMessage = "Invalid username or password.";
        }
        connection.Close();
    }
	//Triggers upon initialization of the page
    protected override void OnInitialized()
    {
        getMembers();
		getEquipment();
    }
	//Method to get all the members from the database when the initialization of the page is triggered
    private void getMembers()
    {
        using (MySqlConnection connection = new MySqlConnection(builder.ConnectionString))
        {
            connection.Open();

            string query = "SELECT membershipid, membername, start, end, membershipfee FROM member";

            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                using (MySqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        members.Add(new Member(
                                reader.GetInt32(0),
                                reader.GetString(1),
                                reader.GetDateTime(2),
                                reader.GetDateTime(3),
                                reader.GetDouble(4)
                        ));
                    }
                }
            }
        }
    }
	//Method to get all the equipment from the database when the initialization of the page is triggered
    private void getEquipment()
    {
        using (MySqlConnection connection = new MySqlConnection(builder.ConnectionString))
        {
            connection.Open();

            string query = "SELECT equipmentID, Name, Type, isAvailable, lastMaintenanceDate FROM Equipment";

            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                using (MySqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        equipment.Add(new Equipment(
                                reader.GetInt32(0),
                                reader.GetString(1),
                                reader.GetString(2),
                                reader.GetBoolean(3),
                                reader.GetDateTime(4)
                        ));
                    }
                }
            }
        }
    }
}
