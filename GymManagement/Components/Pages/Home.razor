@page "/"
@using MySql.Data.MySqlClient
@using MySql.Data
@using GymManagement.Classes
@inject AppState logIn

<!--Screen for the user to log in with a account-->
@if (logIn.loggedIn is false)
{
    <div class="content-container" style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center; overflow: hidden;">
        <h1 style="font-size: 48px; color: #ff0000; text-shadow: 0 0 20px #ff4d4d;">Welcome to GymGo Terminal</h1>
        <div style="margin-top: 20px; display: flex; flex-direction: column; align-items: center;">
            <input type="text" placeholder="Username" style="margin-bottom: 10px; padding: 10px; width: 300px; border: 1px solid #ff0000; border-radius: 5px; background: #121212; color: #fff; font-size: 16px;" @bind="logIn.username" />
            <input type="password" placeholder="Password" style="margin-bottom: 20px; padding: 10px; width: 300px; border: 1px solid #ff0000; border-radius: 5px; background: #121212; color: #fff; font-size: 16px;" @bind="logIn.password" />
            <button style="background: linear-gradient(135deg, #ff0000, #ff4d4d); color: #fff; border: none; padding: 10px 20px; border-radius: 5px; font-size: 16px; cursor: pointer; transition: all 0.3s ease-in-out; box-shadow: 0 0 10px #ff0000;" @onclick="OnLoginClicked">Login</button>
            @if (!string.IsNullOrEmpty(failureMessage))
            {
                <p style="color: #ff0000; margin-top: 10px;">@failureMessage</p>
            }
        </div>
    </div>
}
else
{
    <button class="neon-button" @onclick="() => viewMembers=true">View members</button>
    <button class="neon-button" @onclick="() => viewMembers=false">View equipment</button>
    <!--Screen to show all to member's stored in the database and their information-->
    @if (viewMembers)
    {
        <table class="table neon-table">
            <thead>
                <tr>
                    <th scope="col">Membership ID</th>
                    <th scope="col">Member Name</th>
                    <th scope="col">Start Date</th>
                    <th scope="col">End Date</th>
                    <th scope="col">Membership Fee</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in members)
                {
                    <tr>
                        <td>@member.MembershipID</td>
                        <td>@member.MemberName</td>
                        <td>@member.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@member.EndDate.ToString("yyyy-MM-dd")</td>
                        <td>@member.MembershipFee</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <!--Screen to show all current equipment and their details-->
    else
    {
        <table class="table neon-table">
            <thead>
                <tr>
                    <th scope="col">Equipment ID</th>
                    <th scope="col">Equipment Name</th>
                    <th scope="col">Equipment Type</th>
                    <th scope="col">Is Available</th>
                    <th scope="col">Last Maintenance</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var equipmentItem in equipment)
                {
                    <tr>
                        <td>@equipmentItem.equipmentID</td>
                        <td>@equipmentItem.Name</td>
                        <td>@equipmentItem.Type</td>
                        <td>@(equipmentItem.isAvailable ? "Yes" : "No")</td>
                        <td>@equipmentItem.lastMaintenanceDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<style>
    .neon-text {
    color: #ff073a;
    text-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a, 0 0 30px #ff073a;
    }

    .neon-button {
    box-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a;
    transition: transform 0.2s ease-in-out;
    }

    .neon-button:hover {
    transform: scale(1.1);
    }

    .neon-bg {
    background-color: #1a1a1a;
    color: #ff073a;
    border: 1px solid #ff073a;
    }

    .neon-input {
    background-color: #1a1a1a;
    color: #ff073a;
    border: 1px solid #ff073a;
    }

    .neon-input::placeholder {
    color: #ff073a;
    }

    .neon-table {
    background-color: #1a1a1a;
    color: #ff073a;
    border: 1px solid #ff073a;
    }

    .table-hover tbody tr:hover {
    background-color: #2a2a2a;
    }
</style>

<style>
    .neon-text {
    color: #ff073a;
    text-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a, 0 0 30px #ff073a;
    }

    .neon-button {
    box-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a;
    transition: transform 0.2s ease-in-out;
    }

    .neon-button:hover {
    transform: scale(1.1);
    }

    .form-label {
    font-size: 1.1rem;
    }

    .form-control {
    font-size: 1rem;
    padding: 0.75rem;
    }

    .table {
    font-size: 1rem;
    }
</style>

@code {
    /// <summary>
    /// Created By Kyle Chau
    /// </summary>

    ///<summary>
    /// Stores the message to be displayed when login fails.
    /// </summary>
    private string failureMessage;

    ///<summary>
    /// Checks if the user is viewing members or equipment.
    /// </summary>
    private bool viewMembers = true;

    ///<summary>
    /// Stores a list of members retrieved from the database.
    /// </summary>
    private List<Member> members = new List<Member>();

    ///<summary>
    /// Stores a list of equipment retrieved from the database.
    /// </summary>
    private List<Equipment> equipment = new List<Equipment>();

    ///<summary>
    /// Stores the connection string builder for the MySQL database.
    /// </summary>
    private MySqlConnectionStringBuilder builder = new MySqlConnectionStringBuilder
        {
            Server = "sql3.freesqldatabase.com",
            UserID = "sql3774599",
            Password = "4SbFn7kpp9",
            Database = "sql3774599",
        };
    ///<summary>
    /// Checks if the user has entered a valid username and password that matches the database.
    /// </summary>
	private void OnLoginClicked()
    {
        MySqlConnection connection = new MySqlConnection(builder.ConnectionString);
        connection.Open();
        string sql = "SELECT * FROM login WHERE username = @username AND password = @password";
        MySqlCommand cmd = new MySqlCommand(sql, connection);
        cmd.Parameters.AddWithValue("@username", logIn.username);
        cmd.Parameters.AddWithValue("@password", logIn.password);
        MySqlDataReader reader = cmd.ExecuteReader();
        if (reader.HasRows)
        {
            logIn.loggedIn = true;
            failureMessage = string.Empty;
        }
        else
        {
            failureMessage = "Invalid username or password.";
        }
        connection.Close();
    }
    ///<summary>
	/// Initizalizes the component and retrieves the members and equipment data from the database.
	/// </summary>
	protected override void OnInitialized()
    {
        getMembers();
        getEquipment();
    }
    /// <summary>
    /// Loads all members from the database into the local members list.
    /// This method is called during initialization to populate the UI.
    /// </summary>
    private void getMembers()
    {
        using (MySqlConnection connection = new MySqlConnection(builder.ConnectionString))
        {
            connection.Open();

            string query = "SELECT membershipid, membername, start, end, membershipfee FROM member";

            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                using (MySqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        members.Add(new Member
                            {
                                MembershipID = reader.GetInt32(0),
                                MemberName = reader.GetString(1),
                                StartDate = reader.GetDateTime(2),
                                EndDate = reader.GetDateTime(3),
                                MembershipFee = reader.GetDouble(4)
                            });
                    }
                }
            }
        }
    }

    /// <summary>
    /// Loads all equipment from the database into the local equipments list.
    /// This method is called during initialization to populate the UI.
    /// </summary>
    private void getEquipment()
    {
        using (MySqlConnection connection = new MySqlConnection(builder.ConnectionString))
        {
            connection.Open();

            string query = "SELECT equipmentID, Name, Type, isAvailable, lastMaintenanceDate FROM Equipment";

            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                using (MySqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        equipment.Add(new Equipment{
                                equipmentID = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Type = reader.GetString(2),
                                isAvailable = reader.GetBoolean(3),
                                lastMaintenanceDate = reader.GetDateTime(4)
                        });
                    }
                }
            }
        }
    }
}
