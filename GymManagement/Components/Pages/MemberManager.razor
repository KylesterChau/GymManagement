@page "/manageMembers"  

@using MySql.Data.MySqlClient  

<h3 class="text-center text-primary">Member Manager</h3>

<div class="container mt-4">
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="membershipID" class="form-label">Membership ID:</label>
            <input id="membershipID" type="number" class="form-control" @bind="currentMember.MembershipID" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="memberName" class="form-label">Member Name:</label>
            <input id="memberName" type="text" class="form-control" @bind="currentMember.MemberName" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="startDate" class="form-label">Start Date:</label>
            <input id="startDate" type="date" class="form-control" @bind="currentMember.StartDate" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="endDate" class="form-label">End Date:</label>
            <input id="endDate" type="date" class="form-control" @bind="currentMember.EndDate" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="membershipFee" class="form-label">Membership Fee:</label>
            <input id="membershipFee" type="number" class="form-control" @bind="currentMember.MembershipFee" />
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6 d-flex justify-content-between">
            <button class="btn btn-success" @onclick="AddMemberAsync">Add Member</button>
            <button class="btn btn-primary" @onclick="UpdateMemberAsync">Update Member</button>
            <button class="btn btn-danger" @onclick="DeleteMemberAsync">Delete Member</button>
            <button class="btn btn-info" @onclick="LoadMembers">Get Member Details</button>
        </div>
    </div>
</div>

@code {  
    @code {  
       private Member currentMember = new Member();  
       private List<Member> members = new List<Member>();  

       private readonly string connectionString = new MySqlConnectionStringBuilder  
       {  
           Server = "sql3.freesqldatabase.com",  
           UserID = "sql3774599",  
           Password = "4SbFn7kpp9",  
           Database = "sql3774599",  
       }.ToString();  

       /// <summary>  
       /// Adds a new member to the database and updates the local members list.  
       /// </summary>  
       private async Task AddMemberAsync()  
       {  
           using (MySqlConnection connection = new MySqlConnection(connectionString))  
           {  
               await connection.OpenAsync();  

               string query = "INSERT INTO member (membershipid, membername, start, end, membershipfee) " +  
                              "VALUES (@MembershipID, @MemberName, @StartDate, @EndDate, @MembershipFee)";  

               using (MySqlCommand cmd = new MySqlCommand(query, connection))  
               {  
                   cmd.Parameters.AddWithValue("@MembershipID", currentMember.MembershipID);  
                   cmd.Parameters.AddWithValue("@MemberName", currentMember.MemberName);  
                   cmd.Parameters.AddWithValue("@StartDate", currentMember.StartDate);  
                   cmd.Parameters.AddWithValue("@EndDate", currentMember.EndDate);  
                   cmd.Parameters.AddWithValue("@MembershipFee", currentMember.MembershipFee);  

                   await cmd.ExecuteNonQueryAsync();  
               }  
           }  

           members.Add(new Member  
           {  
               MembershipID = currentMember.MembershipID,  
               MemberName = currentMember.MemberName,  
               StartDate = currentMember.StartDate,  
               EndDate = currentMember.EndDate,  
               MembershipFee = currentMember.MembershipFee  
           });  

           currentMember = new Member();  
       }  

       /// <summary>  
       /// Updates an existing member's details in the database and the local members list.  
       /// </summary>  
       private async Task UpdateMemberAsync()  
       {  
           using (MySqlConnection connection = new MySqlConnection(connectionString))  
           {  
               await connection.OpenAsync();  

               string query = "UPDATE member SET membername = @MemberName, start = @StartDate, end = @EndDate, membershipfee = @MembershipFee " +  
                              "WHERE membershipid = @MembershipID";  

               using (MySqlCommand cmd = new MySqlCommand(query, connection))  
               {  
                   cmd.Parameters.AddWithValue("@MembershipID", currentMember.MembershipID);  
                   cmd.Parameters.AddWithValue("@MemberName", currentMember.MemberName);  
                   cmd.Parameters.AddWithValue("@StartDate", currentMember.StartDate);  
                   cmd.Parameters.AddWithValue("@EndDate", currentMember.EndDate);  
                   cmd.Parameters.AddWithValue("@MembershipFee", currentMember.MembershipFee);  

                   await cmd.ExecuteNonQueryAsync();  
               }  
           }  

           Member memberToUpdate = members.FirstOrDefault(m => m.MembershipID == currentMember.MembershipID);  
           if (memberToUpdate != null)  
           {  
               memberToUpdate.MemberName = currentMember.MemberName;  
               memberToUpdate.StartDate = currentMember.StartDate;  
               memberToUpdate.EndDate = currentMember.EndDate;  
               memberToUpdate.MembershipFee = currentMember.MembershipFee;  
           }  

           currentMember = new Member();  
       }  

       /// <summary>  
       /// Loads all members from the database into the local members list.  
       /// </summary>  
       private void LoadMembers()  
       {  
           using (MySqlConnection connection = new MySqlConnection(connectionString))  
           {  
               connection.Open();  

               string query = "SELECT membershipid, membername, start, end, membershipfee FROM member";  

               using (MySqlCommand command = new MySqlCommand(query, connection))  
               {  
                   using (MySqlDataReader reader = command.ExecuteReader())  
                   {  
                       while (reader.Read())  
                       {  
                           members.Add(new Member  
                           {  
                               MembershipID = reader.GetInt32(0),  
                               MemberName = reader.GetString(1),  
                               StartDate = reader.GetDateTime(2),  
                               EndDate = reader.GetDateTime(3),  
                               MembershipFee = reader.GetDouble(4)  
                           });  
                       }  
                   }  
               }  
           }  
       }  

       /// <summary>  
       /// Initializes the component by loading members and creating a backup of the original members list.  
       /// </summary>  
       protected override void OnInitialized()  
       {  
           LoadMembers();  
           originalMembers = members.Select(m => new Member  
           {  
               MembershipID = m.MembershipID,  
               MemberName = m.MemberName,  
               StartDate = m.StartDate,  
               EndDate = m.EndDate,  
               MembershipFee = m.MembershipFee  
           }).ToList();  
       }  

       private List<Member> originalMembers = new List<Member>();  
    }
  private async Task DeleteMemberAsync()  
  {  
    // To Do: Implement logic to delete a member  
  }  

 
}  

@code {
    public class Member : Membership  
    {  
        public int MembershipID { get; set; }  
        public string MemberName { get; set; }  
        public DateTime StartDate { get; set; }  
        public DateTime EndDate { get; set; }  
        public double MembershipFee { get; set; }  

        protected override void CalculateMembershipFee()  
        {  
            // Implementation for calculating membership fee  
                       switch (MembershipType)  
                       {  
                           case 1:  
                               MembershipFee = 10.0;  
                               break;  
                           case 2:  
                               MembershipFee = 20.0;  
                               break;  
                           case 3:  
                               MembershipFee = 40.0;  
                               break;  
                           default:  
                               MembershipFee = 0.0; // Default value for unknown membership types  
                               break;  
                       }
        }  
    }  

    public abstract class Membership  
    {  
        public int MembershipID { get; set; }  
        public string MemberName { get; set; }  
        public DateTime StartDate { get; set; }  
        public DateTime EndDate { get; set; }  
        public double MembershipFee { get; set; } 
        public int MembershipType { get; set; }

      protected abstract void CalculateMembershipFee();  
      protected virtual string GetMembershipDetails()  
      {  
          return $"Membership ID: {MembershipID}\n" +  
                 $"Member Name: {MemberName}\n" +  
                 $"Start Date: {StartDate.ToShortDateString()}\n" +  
                 $"Membership Fee: {MembershipFee:C}";  
      }  
  }  
}