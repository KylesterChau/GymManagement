@page "/manageMembers"

@using MySql.Data.MySqlClient
@using GymManagement.Exceptions;
@using GymManagement.Classes

<h3 class="text-center text-danger">Member Manager</h3>

<div class="container mt-4 p-4 border rounded shadow-lg neon-bg">
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="membershipID" class="form-label fw-bold neon-text">Membership ID:</label>
            <input id="membershipID" type="number" class="form-control neon-input" @bind="currentMember.MembershipID" placeholder="Enter Membership ID" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="memberName" class="form-label fw-bold neon-text">Member Name:</label>
            <input id="memberName" type="text" class="form-control neon-input" @bind="currentMember.MemberName" placeholder="Enter Member Name" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="startDate" class="form-label fw-bold neon-text">Start Date:</label>
            <input id="startDate" type="date" class="form-control neon-input" @bind="currentMember.StartDate" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="endDate" class="form-label fw-bold neon-text">End Date:</label>
            <input id="endDate" type="date" class="form-control neon-input" @bind="currentMember.EndDate" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="membershipType" class="form-label fw-bold neon-text">Membership Type:</label>
            <select id="membershipType" class="form-select neon-input" @bind="opition">
                <option value= "1">Basic - $10.00</option>
                <option value="2">Standard - $20.00</option>
                <option value="3">Premium - $40.00</option>
            </select>
        </div>
    </div>
</div>

<h3>@ErrorMessage</h3>

<div class="row mt-4">
   <div class="col-md-6 d-flex justify-content-between">
       <button class="btn btn-success btn-lg neon-button neon-bg neon-text" @onclick="AddMemberAsync">Add Member</button>  
       <button class="btn btn-primary btn-lg neon-button neon-bg neon-text" @onclick="UpdateMemberAsync">Update Member</button>  
       <button class="btn btn-danger btn-lg neon-button neon-bg neon-text" @onclick="DeleteMemberAsync">Delete Member</button>  
       <!--Documentation purposes-->
       <button class="btn btn-info btn-lg neon-button neon-bg neon-text" @onclick="LoadMembers">Get Member Details</button>
   </div>
</div>

<table class="table table-striped table-hover mt-4 border shadow-lg neon-table">
   <thead class="table-dark neon-text">
       <tr>
           <th>Membership ID</th>
           <th>Member Name</th>
           <th>Start Date</th>
           <th>End Date</th>
           <th>Membership Fee</th>
       </tr>
   </thead>
   <tbody>
       @foreach (var member in members)  
       {  
          <tr class="neon-text" @onclick="() => SelectMember(member)">  
              <td>@member.MembershipID</td>  
              <td>@member.MemberName</td>  
              <td>@member.StartDate.ToShortDateString()</td>  
              <td>@member.EndDate.ToShortDateString()</td>  
              <td>@member.MembershipFee.ToString("C")</td>  
          </tr>  
       }
   </tbody>
</table>


<style>
    .neon-text {
        color: #ff073a;
        text-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a, 0 0 30px #ff073a;
    }

    .neon-button {
        box-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a;
        transition: transform 0.2s ease-in-out;
    }

        .neon-button:hover {
            transform: scale(1.1);
        }

    .neon-bg {
        background-color: #1a1a1a;
        color: #ff073a;
        border: 1px solid #ff073a;
    }

    .neon-input {
        background-color: #1a1a1a;
        color: #ff073a;
        border: 1px solid #ff073a;
    }

        .neon-input::placeholder {
            color: #ff073a;
        }

    .neon-table {
        background-color: #1a1a1a;
        color: #ff073a;
        border: 1px solid #ff073a;
    }

    .table-hover tbody tr:hover {
        background-color: #2a2a2a;
    }
</style>

<style>
    .neon-text {
        color: #ff073a;
        text-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a, 0 0 30px #ff073a;
    }

    .neon-button {
        box-shadow: 0 0 5px #ff073a, 0 0 10px #ff073a, 0 0 20px #ff073a;
        transition: transform 0.2s ease-in-out;
    }

        .neon-button:hover {
            transform: scale(1.1);
        }

    .form-label {
        font-size: 1.1rem;
    }

    .form-control {
        font-size: 1rem;
        padding: 0.75rem;
    }

    .table {
        font-size: 1rem;
    }
</style>


@code {  

   /// <summary>  
   /// Represents the currently selected or being edited member.  
   /// </summary>  
   private Member currentMember = new Member();  

   /// <summary>  
   /// Stores the list of all members loaded from the database.  
   /// </summary>  
   private List<Member> members = new List<Member>();  

   /// <summary>  
   /// Indicates whether certain UI elements are displayed.  
   /// </summary>  
   private bool IsDisplayed = false;  

   /// <summary>  
   /// Stores the selected membership type option.  
   /// </summary>  
   private int opition;  

   /// <summary>  
   /// Connection string used to connect to the MySQL database.  
   /// </summary>  
   private readonly string connectionString = new MySqlConnectionStringBuilder  
   {  
       Server = "sql3.freesqldatabase.com",  
       UserID = "sql3774599",  
       Password = "4SbFn7kpp9",  
       Database = "sql3774599",  
   }.ToString();  

   /// <summary>  
   /// Stores error messages to display in the UI.  
   /// </summary>  
   private string ErrorMessage { get; set; }  

   /// <summary>  
   /// Adds a new member to the database and updates the local members list.  
   /// Validates input and calculates the membership fee before saving.  
   /// </summary>  
   private async Task AddMemberAsync()  
   {  
       try  
       {  
           if (currentMember == null || string.IsNullOrWhiteSpace(currentMember.MemberName))  
           {  
               throw new InputIsNullException();  
           }  

           using (MySqlConnection connection = new MySqlConnection(connectionString))  
           {  
               await connection.OpenAsync();  
               currentMember.MembershipType = opition;  
               currentMember.MembershipFee = currentMember.CalculateMembershipFee();  
               string query = "INSERT INTO member (membershipid, membername, start, end, membershipfee) " +  
                              "VALUES (@MembershipID, @MemberName, @StartDate, @EndDate, @MembershipFee)";  

               using (MySqlCommand cmd = new MySqlCommand(query, connection))  
               {  
                   cmd.Parameters.AddWithValue("@MembershipID", currentMember.MembershipID);  
                   cmd.Parameters.AddWithValue("@MemberName", currentMember.MemberName);  
                   cmd.Parameters.AddWithValue("@StartDate", currentMember.StartDate);  
                   cmd.Parameters.AddWithValue("@EndDate", currentMember.EndDate);  
                   cmd.Parameters.AddWithValue("@MembershipFee", currentMember.MembershipFee);  

                   await cmd.ExecuteNonQueryAsync();  
               }  
           }  

           members.Add(new Member  
           {  
               MembershipID = currentMember.MembershipID,  
               MemberName = currentMember.MemberName,  
               StartDate = currentMember.StartDate,  
               EndDate = currentMember.EndDate,  
               MembershipFee = currentMember.MembershipFee  
           });  

           currentMember = new Member();  
           ErrorMessage = string.Empty; // Clear any previous error messages  
       }  
       catch (InputIsNullException ex)  
       {  
           ErrorMessage = $"Invalid input: {ex.Message}";  
       }  
       catch (Exception ex)  
       {  
           ErrorMessage = $"An error occurred: {ex.Message}";  
       }  
   }  

   /// <summary>  
   /// Updates an existing member's details in the database and the local members list.  
   /// Ensures the database and UI remain in sync.  
   /// </summary>  
   private async Task UpdateMemberAsync()  
   {  
       using (MySqlConnection connection = new MySqlConnection(connectionString))  
       {  
           await connection.OpenAsync();  

           string query = "UPDATE member SET membername = @MemberName, start = @StartDate, end = @EndDate, membershipfee = @MembershipFee " +  
                          "WHERE membershipid = @MembershipID";  

           using (MySqlCommand cmd = new MySqlCommand(query, connection))  
           {  
               cmd.Parameters.AddWithValue("@MembershipID", currentMember.MembershipID);  
               cmd.Parameters.AddWithValue("@MemberName", currentMember.MemberName);  
               cmd.Parameters.AddWithValue("@StartDate", currentMember.StartDate);  
               cmd.Parameters.AddWithValue("@EndDate", currentMember.EndDate);  
               cmd.Parameters.AddWithValue("@MembershipFee", currentMember.MembershipFee);  

               await cmd.ExecuteNonQueryAsync();  
           }  
       }  

       Member memberToUpdate = members.FirstOrDefault(m => m.MembershipID == currentMember.MembershipID);  
       if (memberToUpdate != null)  
       {  
           memberToUpdate.MemberName = currentMember.MemberName;  
           memberToUpdate.StartDate = currentMember.StartDate;  
           memberToUpdate.EndDate = currentMember.EndDate;  
           memberToUpdate.MembershipFee = currentMember.MembershipFee;  
       }  

       currentMember = new Member();  
   }  

   /// <summary>  
   /// Selects a member from the list and populates the form fields for editing.  
   /// </summary>  
   /// <param name="member">The member to select.</param>  
   private void SelectMember(Member member)  
   {  
       currentMember = new Member  
       {  
           MembershipID = member.MembershipID,  
           MemberName = member.MemberName,  
           StartDate = member.StartDate,  
           EndDate = member.EndDate,  
           MembershipFee = member.MembershipFee  
       };  
       IsDisplayed = false;  
   }  

   /// <summary>  
   /// Loads all members from the database into the local members list.  
   /// This method is called during initialization to populate the UI.  
   /// </summary>  
   private void LoadMembers()  
   {  
       using (MySqlConnection connection = new MySqlConnection(connectionString))  
       {  
           connection.Open();  

           string query = "SELECT membershipid, membername, start, end, membershipfee FROM member";  

           using (MySqlCommand command = new MySqlCommand(query, connection))  
           {  
               using (MySqlDataReader reader = command.ExecuteReader())  
               {  
                   while (reader.Read())  
                   {  
                       members.Add(new Member  
                       {  
                           MembershipID = reader.GetInt32(0),  
                           MemberName = reader.GetString(1),  
                           StartDate = reader.GetDateTime(2),  
                           EndDate = reader.GetDateTime(3),  
                           MembershipFee = reader.GetDouble(4)  
                       });  
                   }  
               }  
           }  
       }  
   }  

   /// <summary>  
   /// Initializes the component by loading members and creating a backup of the original members list.  
   /// </summary>  
   protected override void OnInitialized()  
   {  
       LoadMembers();  
       originalMembers = members.Select(m => new Member  
       {  
           MembershipID = m.MembershipID,  
           MemberName = m.MemberName,  
           StartDate = m.StartDate,  
           EndDate = m.EndDate,  
           MembershipFee = m.MembershipFee  
       }).ToList();  
   }  

   /// <summary>  
   /// Stores a backup of the original members list for potential restoration.  
   /// </summary>  
   private List<Member> originalMembers = new List<Member>();  

   /// <summary>  
   /// Deletes a member from the database and removes them from the local members list.  
   /// </summary>  
   private async Task DeleteMemberAsync()  
   {  
       using (MySqlConnection connection = new MySqlConnection(connectionString))  
       {  
           await connection.OpenAsync();  
           MySqlCommand command = new MySqlCommand("DELETE FROM member WHERE membershipid = @MembershipID", connection);  
           command.Parameters.AddWithValue("@MembershipID", currentMember.MembershipID);  
           await command.ExecuteNonQueryAsync();  
       }  

       Member memberToRemove = members.FirstOrDefault(m => m.MembershipID == currentMember.MembershipID);  
       if (memberToRemove != null)  
       {  
           members.Remove(memberToRemove);  
       }  

       currentMember = new Member();  
   }  
}







